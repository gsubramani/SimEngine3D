%% SIMENGINE3D
classdef SimEngine3D
    properties
        parts
        markers
        joints
        t
        g
        nb
        nc
        TOL
        first
        
    end
    methods
        function obj = SimEngine3D(file_name)
            attributes = parseModel(file_name);
            obj.parts = attributes.parts;
            obj.markers = attributes.markers';
            obj.joints = attributes.joints';
            obj.t = 0;
            obj.g = attributes.g;
            obj.nb = length(obj.parts) - 1;
            obj.nc = length(obj.joints);
            obj.TOL = 0.01;
            obj.first = 1;
            
        end
        %% Returns the value of the specified constraint
        % flag returns which values are required:
        % flag = 0 : just value of the constraint
        % flag = 1 : return mu
        % flag = 2 : return with gamma
        % flag = 11 : with phi_q
        % flag = 12 : with phi_q
        
        function out = constraint(obj,joint_id,flag)
            ii = obj.joints(joint_id).i;
            jj = obj.joints(joint_id).j;
            
            markeri = obj.markers(ii);
            markerj = obj.markers(jj);
            
            ind_i = markeri.part;
            ind_j = markerj.part;
            
            parti = obj.parts([obj.parts.id] == (markeri.part));
            partj = obj.parts([obj.parts.id] == (markerj.part));
            ri = parti.r;
            rj = partj.r;
            
            rdoti = parti.rdot;
            rdotj = partj.rdot;
            
            ai_ = markeri.r;
            aj_ = markerj.r;
            Ai = p2A(parti.p);
            Aj = p2A(partj.p);
            pi = parti.p;
            pj = partj.p;
            pdoti = parti.pdot;
            pdotj = partj.pdot;
            ai = Ai*ai_;
            aj = Aj*aj_;
            f = obj.joints(joint_id).f(obj.t);
            c = obj.joints(joint_id).c;
            si_ = ai_;
            sj_ = aj_;
            dij = rj + Aj*sj_ - ri - Ai*si_;
            adoti = getB(pi,ai_)*pdoti;
            %adotj = getB(pj,aj_)*pdotj;
            ddotij = rdotj - rdoti + getB(pj,sj_)*pj - getB(pi,si_)*pi;
            nb = length(obj.parts);
            %partiald = zeros(1,length(obj.parts)*7);
            
            if(strcmp(obj.joints(joint_id).type,'DP1'))
                if(flag == 1)
                    out = ai_'*Ai'*Aj*aj_ - f(1);
                    
                elseif(flag == 2)
                    out = f(2);
                    
                elseif(flag == 3)
                    out = -ai'*getB(pdotj,aj_)*pdotj ...
                        -aj'*getB(pdoti,ai_)*pdoti ...
                        - 2*((getB(pi,ai_)*pdoti)'*(getB(pj,aj_)*pdotj)) + f(3);
                    
                    
                    
                    
                elseif(flag == 4)
                    out = [zeros(1,3) aj'*getB(pi,ai_) ...
                        zeros(1,3) ai'*getB(pj,aj_)];
                    out = matresize(out,ind_i,ind_j,nb);
                elseif(flag == 5)
                    out = [zeros(3,3) zeros(3,4)                 zeros(3,3) zeros(3,4);
                        zeros(4,3) getK(ai_,aj)               zeros(4,3) getB(pi,aj)'*getB(pj,ai);
                        zeros(3,3) zeros(3,4)                 zeros(3,3) zeros(3,4);
                        zeros(4,3) getB(pi,aj)'*getB(pj,ai) zeros(4,3) getK(aj_,ai)];
                    out = matresize2(out,ind_i,ind_j,nb);
                else
                    error('Invalid flag');
                end
                
                
                
            elseif(strcmp(obj.joints(joint_id).type,'CD'))
                if (flag == 1)
                    out = c'*(rj + Aj*sj_ - ri - Ai*si_) - f(1);
                    
                elseif(flag == 2)
                    %out = -c'*(getB(pdotj,sj_)*pj - getB(pdoti,si_)*pi)-f(2);
                    out = f(2);
                    
                elseif(flag == 3)
                    out = c'*getB(pdoti,si_)*pdoti ...
                        - c'*getB(pdoti,ai_)*pdoti - c'*getB(pdotj,sj_)*pdotj + f(3);
                    
                    
                elseif(flag == 4)
                    out = [-c' -c'*getB(pi,si_) c' c'*getB(pj,sj_)];
                    out = matresize(out,ind_i,ind_j,nb);
                elseif(flag == 5)
                    out = [zeros(3,3) zeros(3,4)   zeros(3,3)   zeros(3,4);
                        zeros(4,3) -getK(si_,c) zeros(4,3)   zeros(4,4);
                        zeros(3,3) zeros(3,4)   zeros(3,3)   zeros(3,4);
                        zeros(4,3) zeros(4,4)   zeros(4,3)   getK(sj_,c)];
                    out = matresize2(out,ind_i,ind_j,nb);
                else
                    error('Invalid flag');
                end
                
            elseif(strcmp(obj.joints(joint_id).type,'DP2'))
                if(flag == 1)
                    out = ai_'*Ai'*dij - f(1);
                    
                elseif(flag == 2)
                    out =  f(2);
                    
                elseif(flag == 3)
                    out = -ai'*getB(pdotj,sj_)*pdotj ...
                        + ai'*getB(pdoti,si_)*pdoti ...
                        - dij'*getB(poti,ai_)*pdoti - 2*adoti'*ddotij + f(3);
                    
                    
                elseif(flag == 4)
                    out = [-ai' dij'*getB(pi,ai_)-ai'*getB(pj,sj_) ...
                        ai' ai'*getB(pj,sj_)];
                    out = matresize(out,ind_i,ind_j,nb);
                    
                else
                    error('Invalid flag');
                end
                
                
            elseif(strcmp(obj.joints(joint_id).type,'D'))
                if(flag == 1)
                    out = dij'*dij - f(1);
                    
                elseif(flag == 2)
                    out =  f(2);
                    
                elseif(flag == 3)
                    out = -2*dij'*getB(pdotj,sj_)*pdotj ...
                        + 2*dij'*getB(pdoti,si_)*pdoti - 2*ddotij'*ddotij + f(3);
                    
                    
                elseif(flag == 4)
                    out = [-2*dij' 2*dij'*getB(pj,sj_) 2*dij' ...
                        2*dij'*getB(pj,sj_)];
                    out = matresize(out,ind_i,ind_j,nb);
                else
                    error('Invalid flag');
                    
                end
            else
                error('Constraint not found')
            end
        end
        function phi_qql = computephi_qql(obj,q,lambdas)
            q = reshape(q,length(q),1);
            obj = obj.setq(q);
            % phi_q is a matrix of obj.nc constraints + euler constraints
            % (X) variables which are obj.nb*7
            phi_qql = zeros(7*obj.nb,7*obj.nb);
            for ii = 1:obj.nc
                phi_qql =phi_qql  + lambdas(ii)*obj.constraint(ii,5);
            end
        end
        
        function phi_q = computephi_qF(obj,q)
            q = reshape(q,length(q),1);
            obj = obj.setq(q);
            % phi_q is a matrix of obj.nc constraints + euler constraints
            % (X) variables which are obj.nb*7
            phi_q = zeros(obj.nc ...
                + obj.nb,7*obj.nb);
            for ii = 1:obj.nc
                phi_q(ii,:) = constraint(obj,ii,4);
            end
            % adding the euler parameterization constraints
            % skipping first body since it is the ground body
            for ii = 1 : obj.nb;
                indexing = obj.nb*3 + ii*4 - 3 : obj.nb*3 + ii*4;
                phi_q(obj.nc + ii,indexing) = 2*q(indexing,1)';
            end
        end
        function muF = computemuF(obj,q)
            q = reshape(q,length(q),1);
            obj = obj.setq(q);
            muF = zeros(length(obj.joints) + length(obj.parts) - 1,1);
            for ii = 1:length(obj.joints)
                muF(ii) = constraint(obj,ii,2);
            end
            % adding the euler parameterization constraints
            % skipping first body since it is the ground body
            for ii = 2 : length(obj.parts)
                muF(length(obj.joints) + ii - 1) = 0;
            end
        end
        function gammaF = computegammaF(obj,q,qdot)
            q = reshape(q,length(q),1);
            qdot = reshape(qdot,length(qdot),1);
            
            obj = obj.setq(q);
            obj = obj.setqdot(qdot);
            gammaF = zeros(length(obj.joints) + length(obj.parts) - 1,1);
            for ii = 1:length(obj.joints)
                gammaF(ii) = constraint(obj,ii,3);
            end
            % adding the euler parameterization constraints
            % skipping first body since it is the ground body
            for ii = 2 : length(obj.parts)
                gammaF(length(obj.joints) + ii - 1) ...
                    = -2*(obj.parts(ii).pdot'*obj.parts(ii).pdot);
            end
        end
        
        function phiF = computephiF(obj,q)
            % This function computes all the kinematics constraints
            % input - a vector of [q t]
            % we need to remove the ground bodies euler parameterization
            % constraint therefore : -1
            q = reshape(q,length(q),1);
            obj = obj.setq(q);
            
            phiF = zeros(length(obj.joints) + length(obj.parts) - 1,1);
            for ii = 1:length(obj.joints)
                phiF(ii) = constraint(obj,ii,1);
            end
            % adding the euler parameterization constraints
            % skipping first body since it is the ground body
            for ii = 2 : length(obj.parts)
                phiF(length(obj.joints) + ii - 1) ...
                    = obj.parts(ii).p'*obj.parts(ii).p - 1;
                
            end
        end
        
        function q = getq(obj)
            for ii = 2:length(obj.parts)
                q((ii - 1)*3 - 2 : (ii - 1)*3) = obj.parts(ii).r;
                q((length(obj.parts) - 1)*3 + (ii - 1)*4 - 3 ...
                    :(length(obj.parts) - 1)*3 + (ii - 1)*4) = obj.parts(ii).p;
            end
            % force to column vector
            q = reshape(q,length(q),1);
        end
        function obj = setq(obj,q)
            for ii = 2:length(obj.parts)
                obj.parts(ii).r = q((ii - 1)*3 - 2 : (ii - 1)*3);
                obj.parts(ii).p = q((length(obj.parts) - 1)*3 + (ii - 1)*4 - 3 ...
                    :(length(obj.parts) - 1)*3 + (ii - 1)*4);
            end
        end
        function obj = setqdot(obj,qdot)
            for ii = 2:length(obj.parts)
                obj.parts(ii).rdot = qdot((ii - 1)*3 - 2 : (ii - 1)*3);
                obj.parts(ii).pdot = qdot((length(obj.parts) - 1)*3 + (ii - 1)*4 - 3 ...
                    :(length(obj.parts) - 1)*3 + (ii - 1)*4);
            end
        end
        
        
        function q = positionAnalysis(obj,initq,t)
            obj.t = t;
            initq = reshape(initq,length(initq),1);
            q = fsolve(@(q)obj.computephiF(q),initq);
            %q = obj.newtonRaphsonPos(t,initq);
        end
        
        function q = newtonRaphsonPos(obj,t,initq)
            TOL2 = 0.01;
            i = 0;
            obj.t = t;
            q = reshape(initq,length(initq),1);
            valnorm = 10;
            while(valnorm>TOL2 && i<100)
                q = q - obj.computephi_qF(q)\obj.computephiF(q);
                valnorm = norm(obj.computephiF(q));
            end
        end
        
        function qdot = velocityAnalysis(obj,q,t)
            obj.t = t;
            q = reshape(q,length(q),1);
            qdot = obj.computephi_qF(q)\obj.computemuF(q);
        end
        function [qdotdot, qdot] = acclerationAnalysis(obj,q,t)
            obj.t = t;
            q = reshape(q,length(q),1);
            phi_qF = obj.computephi_qF(q);
            qdot = phi_qF\obj.computemuF(q);
            qdotdot = phi_qF\obj.computegammaF(q,qdot);
        end
        function M = getM(obj)
            M_diag = zeros(1,(length(obj.parts) - 1)*3);
            for ii = 1:length(obj.parts)-1
                M_diag(3*ii - 2:3*ii) = obj.parts(ii+1).m*ones(1,3);
            end
            M = diag(M_diag);
        end
        
        function [n_tau] = computeTorques(obj,body,q,qdot,qdotdot,lambdas,t)
            obj.t = t;
            Jp = obj.getJ(q);
            Jpi = Jp(4*body - 3:4*body,4*body - 3:4*body);
            Jpdot = obj.getJ(qdot);
            Jpdoti = Jpdot(4*body - 3:4*body,4*body - 3:4*body);
            phi_qF = obj.computephi_qF(q);
            
            phi_pi = phi_qF(1:obj.nc,obj.nb*3 + body*4 - 3:obj.nb*3 + body*4);
            
            
            phi_pp = phi_qF(obj.nc + body,obj.nb*3 + body*4 - 3:obj.nb*3 + body*4);
            
            p = q(3*obj.nb+ body*4 - 3 : 3*obj.nb + body*4);
            %pdot = qdot(3*obj.nb+ body*4 - 3 : 3*obj.nb + body*4);
            pdotdot = qdotdot(3*obj.nb+ body*4 - 3 : 3*obj.nb + body*4);
            Gp = getG(p);
            %Gpdot = getG(pdot);
            lambdaphi = lambdas(1:obj.nc);
            lambdap = lambdas(obj.nc + body);
            n_tau = 2*Gp'\(Jpi*pdotdot + phi_pi'*lambdaphi + phi_pp'*lambdap - 8*Jpdoti*p);
        end
        
        
        function Jp = getJ(obj,q)
            p = q(3*(length(obj.parts) - 1)+ 1 : end);
            Jp = zeros((length(obj.parts) - 1)*4);
            for ii = 1:length(obj.parts)-1
                Gp = getG(p(ii*4 - 3:ii*4));
                Jp(4*ii - 3:4*ii,4*ii - 3:4*ii) = 4*Gp'*obj.parts(ii+1).j*Gp;
            end
        end
        function tau = gettau(obj,q,qdot)
            tau = zeros((length(obj.parts) - 1)*4,1);
            p = q(3*(length(obj.parts) - 1)+ 1 : end);
            pdot = qdot(3*(length(obj.parts) - 1)+ 1 : end);
            for ii = 1:length(obj.parts)-1
                Gpdot = getG(pdot(ii*4 - 3:ii*4));
                tau(4*ii - 3:4*ii) ...
                    = 8*Gpdot'*obj.parts(ii+1).j*Gpdot*pdot(ii*4 - 3:ii*4);
            end
        end
        function F = getF(obj,q,qdot)
            F = zeros(obj.nb*3,1);
            for ii = 1:obj.nb
                F(3*ii - 2:3*ii) = obj.parts(ii + 1).m*obj.g;
            end
        end
        function [A, B]  = getEOM(obj,q,qdot)
            M = obj.getM();
            Jp = obj.getJ(q);
            phi_qF = obj.computephi_qF(q);
            phi_rF = phi_qF(1:obj.nc,1:3*obj.nb);
            phi_pF = phi_qF(1:obj.nc,3*obj.nb + 1:end);
            p_pF = phi_qF(length(obj.joints) + 1:end,3*obj.nb + 1:end);
            A = [M               ,zeros(3*obj.nb,4*obj.nb),zeros(3*obj.nb,obj.nb),phi_rF';
                zeros(4*obj.nb,3*obj.nb),Jp              ,p_pF'                 ,phi_pF';
                zeros(obj.nb,3*obj.nb)  ,p_pF            ,zeros(obj.nb,obj.nb)  ,zeros(obj.nb,obj.nc);
                phi_rF                  ,phi_pF          ,zeros(obj.nc,obj.nb)  ,zeros(obj.nc,obj.nc)];
            F = obj.getF(q,qdot);
            tau = obj.gettau(q,qdot);
            gammaF = obj.computegammaF(q,qdot);
            gamma = gammaF(1:obj.nc,1);
            gamma_p = gammaF(obj.nc + 1:end,1);
            
            B = [F;tau;gamma_p;gamma];
        end
        
        function [PSY]  = getPSYg(obj,q,beta,h,lambdas,mode)
            M = obj.getM();
            Jp = obj.getJ(q);
            phi_qF = obj.computephi_qF(q);
            phi_rF = phi_qF(1:obj.nc,1:3*obj.nb);
            phi_pF = phi_qF(1:obj.nc,3*obj.nb + 1:end);
            p_pF = phi_qF(obj.nc + 1:obj.nc + obj.nb,3*obj.nb + 1:end);
            obj.first
            if(strcmp(mode,'quasi'))
                PSY = [M               ,zeros(3*obj.nb,4*obj.nb),zeros(3*obj.nb,obj.nb),phi_rF';
                    zeros(4*obj.nb,3*obj.nb),Jp              ,p_pF'                 ,phi_pF';
                    zeros(obj.nb,3*obj.nb)  ,p_pF            ,zeros(obj.nb,obj.nb)  ,zeros(obj.nb,obj.nc);
                    phi_rF                  ,phi_pF          ,zeros(obj.nc,obj.nb)  ,zeros(obj.nc,obj.nc)];
            elseif(strcmp(mode,'full'))
                phi_qql = obj.computephi_qql(q,lambdas);
                phi11 = M + h^2*beta^2*(phi_qql(1:obj.nb*3,1:obj.nb*3));
                phi12 = h^2*beta^2*(phi_qql(1:obj.nb*3,obj.nb*3 + 1:end));
                phi21 = phi12';
                phi22 = Jp + h^2*beta^2*(phi_qql(obj.nb*3 + 1:end,obj.nb*3 + 1:end));
                
                PSY = [phi11               ,phi12,zeros(3*obj.nb,obj.nb),phi_rF';
                    phi21,phi22             ,p_pF'                 ,phi_pF';
                    zeros(obj.nb,3*obj.nb)  ,p_pF            ,zeros(obj.nb,obj.nb)  ,zeros(obj.nb,obj.nc);
                    phi_rF                  ,phi_pF          ,zeros(obj.nc,obj.nb)  ,zeros(obj.nc,obj.nc)];
                
            end
        end
        
        function [delZ,normG,q,qdot] = computeQuasiNewtonG1(obj,qdotdot,lambdas,lambdasp,q_1,qdot_1,h)
            [q,qdot,beta] = xvnBDF1(qdotdot,q_1,qdot_1,h);
            discG = obj.getG(q,qdot,qdotdot,lambdas,lambdasp,beta,h);
            jacobianG = obj.getPSYg(q,beta,h,lambdas,mode);
            delZ = -jacobianG\discG;
            normG = norm(discG);
        end
        
        function [delZ,normG,q,qdot] = computeNewtonG1(obj,qdotdot,lambdas,lambdasp,q_1,qdot_1,h,mode)
            [q,qdot,beta] = xvnBDF1(qdotdot,q_1,qdot_1,h);
            discG = obj.getG(q,qdot,qdotdot,lambdas,lambdasp,beta,h);
            jacobianG = obj.getPSYg(q,beta,h,lambdas,mode);
            delZ = -jacobianG\discG;
            normG = norm(discG);
        end
        
        
        function [delZ,normG,q,qdot] = computeNewtonG2(obj,qdotdot,lambdas,lambdasp,q_1,q_2,qdot_1,qdot_2,h,mode)
            [q,qdot,beta] = xvnBDF2(qdotdot,q_1,q_2,qdot_1,qdot_2,h);
            discG = obj.getG(q,qdot,qdotdot,lambdas,lambdasp,beta,h);
            jacobianG = obj.getPSYg(q,beta,h,lambdas,mode);
            delZ = -jacobianG\discG;
            normG = norm(discG);
        end
        
        function [delZ,normG,q,qdot] = computeQuasiNewtonG2(obj,qdotdot,lambdas,lambdasp,q_1,q_2,qdot_1,qdot_2,h)
            [q,qdot,beta] = xvnBDF2(qdotdot,q_1,q_2,qdot_1,qdot_2,h);
            discG = obj.getG(q,qdot,qdotdot,lambdas,lambdasp,beta,h);
            jacobianG = obj.getPSYg(q,beta,h,lambdas,'quasi');
            delZ = -jacobianG\discG;
            normG = norm(discG);
        end
        
        
        function g = getG(obj,q,qdot,qdotdot,lambdas,lambdasp,beta,h)
            %g = zeros(obj.nb*8+obj.nc,1);
            
            M = obj.getM();
            Jp = obj.getJ(q);
            phi_qF = obj.computephi_qF(q);
            phi_rF = phi_qF(1:obj.nc,1:3*obj.nb);
            phi_pF = phi_qF(1:obj.nc,3*obj.nb + 1:end);
            p_pF = phi_qF(length(obj.joints) + 1:end,3*obj.nb + 1:end);
            
            F = obj.getF(q,qdot);
            tau = obj.gettau(q,qdot);
            phiF = obj.computephiF(q);
            
            g = [M*qdotdot(1:obj.nb*3,1) + phi_rF'*lambdas - F;
                Jp*qdotdot(obj.nb*3+1:end,1) + phi_pF'*lambdas + p_pF'*lambdasp - tau;
                1/(beta^2*h^2)*phiF(obj.nc +1:end,1);
                1/(beta^2*h^2)*phiF(1:obj.nc,1)];
        end
        
        function [reactionForces] = inverseDynamicsAnalysis(obj,q,t)
            q = reshape(q,length(q),1);
            [qdotdot,qdot] = obj.acclerationAnalysis(q,t);
            rdotdot = qdotdot(1:(length(obj.parts)-1)*3);
            pdotdot = qdotdot((length(obj.parts)-1)*3 + 1:end);
            phi_qF = obj.computephi_qF(q);
            M = obj.getM();
            Jp = obj.getJ(q);
            tau = obj.gettau(q,qdot);
            F = obj.getF(q,qdot);
            lambdas = -phi_qF'\([M*rdotdot - F;Jp*pdotdot - tau]);
            reactionForces = (-phi_qF'*diag(lambdas))';
        end
        
        
        
        function [z,q,qdot] = solveNewton1(obj,q_1,qdot_1,z0,h,mode)
            i = 0;
            normG = 100;
            z = z0;
            obj.first = 1;
            if(strcmp(mode,'modified'))
                qdotdot = z(1:obj.nb*7,1);
                lambdas = z(obj.nb*7 + obj.nb+1:end,1);
                [q,qdot,beta] = xvnBDF1(qdotdot,q_1,qdot_1,h);
                jacobianG = obj.getPSYg(q,beta,h,lambdas,'full');
                
                while(obj.TOL<normG&&i<10)
                    qdotdot = z(1:obj.nb*7,1);
                    lambdasp = z(obj.nb*7 + 1 : 1:obj.nb*7 + obj.nb,1);
                    lambdas = z(obj.nb*7 + obj.nb+1:end,1);
                    %[delZ,normG,q,qdot] = obj.computeQuasiNewtonG1(qdotdot,lambdas,lambdasp,q_1,qdot_1,h);
                    
                    [q,qdot,beta] = xvnBDF1(qdotdot,q_1,qdot_1,h);
                    discG = obj.getG(q,qdot,qdotdot,lambdas,lambdasp,beta,h);
                    delZ = -jacobianG\discG;
                    normG = norm(discG);
                    
                    obj.first = 0;
                    z = z + delZ;
                    i = i+1;
                end
                return;
                
            end
            
            while(obj.TOL<normG&&i<10)
                qdotdot = z(1:obj.nb*7,1);
                lambdasp = z(obj.nb*7 + 1 : 1:obj.nb*7 + obj.nb,1);
                lambdas = z(obj.nb*7 + obj.nb+1:end,1);
                %[delZ,normG,q,qdot] = obj.computeQuasiNewtonG1(qdotdot,lambdas,lambdasp,q_1,qdot_1,h);
                [delZ,normG,q,qdot] = obj.computeNewtonG1(qdotdot,lambdas,lambdasp,q_1,qdot_1,h,mode);
                obj.first = 0;
                z = z + delZ;
                i = i+1;
            end
        end
        
        
        function [z,q,qdot,i] = solveNewton2(obj,q_1,q_2,qdot_1,qdot_2,z0,h,mode)
            i = 0;
            normG = 100;
            z = z0;
            if(strcmp(mode,'modified'))
                lambdas = z(obj.nb*7 + obj.nb+1:end,1);
                qdotdot = z(1:obj.nb*7,1);
                [q,qdot,beta] = xvnBDF2(qdotdot,q_1,q_2,qdot_1,qdot_2,h);
                jacobianG = obj.getPSYg(q,beta,h,lambdas,'full');
                while(obj.TOL<normG&&i<10)
                    qdotdot = z(1:obj.nb*7,1);
                    lambdasp = z(obj.nb*7 + 1 : 1:obj.nb*7 + obj.nb,1);
                    lambdas = z(obj.nb*7 + obj.nb+1:end,1);
                    [q,qdot,beta] = xvnBDF2(qdotdot,q_1,q_2,qdot_1,qdot_2,h);
                    discG = obj.getG(q,qdot,qdotdot,lambdas,lambdasp,beta,h);
                    delZ = -jacobianG\discG;
                    normG = norm(discG);
                    z = z + delZ;
                    i = i+1;
                end
                return;
            end
            while(obj.TOL<normG&&i<10)
                qdotdot = z(1:obj.nb*7,1);
                lambdasp = z(obj.nb*7 + 1 : 1:obj.nb*7 + obj.nb,1);
                lambdas = z(obj.nb*7 + obj.nb+1:end,1);
                [delZ,normG,q,qdot] = obj.computeNewtonG2(qdotdot,lambdas,lambdasp,q_1,q_2,qdot_1,qdot_2,h,mode);
                z = z + delZ;
                i = i+1;
            end
        end
        
        function [qvec,qdotvec,zvec] = solveSystemDynamics1(obj,h,n,q0,qdot0,t0,mode)
            
            z = zeros(obj.nb*8 + obj.nc,1);
            qvec = zeros(obj.nb*7,n);
            qdotvec = zeros(obj.nb*7,n);
            zvec = zeros(obj.nb*8 + obj.nc,n);
            
            qvec(:,1) = q0;
            qdotvec(:,1) = qdot0;
            obj.t = t0;
            obj.first = 1;
            for ii = 2:n
                q_1 = qvec(:,ii-1);
                qdot_1 = qdotvec(:,ii-1);
                obj.t = h + obj.t;
                [z,q,qdot] = obj.solveNewton1(q_1,qdot_1,z,h,mode);
                obj.first = 0;
                qvec(:,ii) = q;
                qdotvec(:,ii) = qdot;
                zvec(:,ii) = z;
            end
        end
        
       
        
        function [qvec,qdotvec,zvec,tvec,numitr] = solveSystemDynamics2(obj,h1,h2,n1,n2,q0,qdot0,t0,mode)
            
            [qvec,qdotvec,zvec] = solveSystemDynamics1(obj,h1,n1,q0,qdot0,t0,mode);
            tvec = [(1:n1)*h1  n1*h1 + (1:n2)*h2];
            qvec = [qvec zeros(obj.nb*7,n2)];
            qdotvec = [qdotvec zeros(obj.nb*7,n2)];
            zvec = [zvec zeros(obj.nb*8 + obj.nc,n2)];
            numitr = zeros(n2,1);
            
            %qvec(:,1) = q0;
            %qdotvec(:,1) = qdot0;
            
            obj.t = t0 + (n1+1)*h1;
            
            for ii = n1 + 1:n1 + n2
                q_1 = qvec(:,ii-1);
                qdot_1 = qdotvec(:,ii-1);
                
                q_2 = qvec(:,ii-2);
                qdot_2 = qdotvec(:,ii-2);
                
                z = zvec(:,ii-2);
                
                obj.t = h2 + obj.t;
                [z,q,qdot,iter] = obj.solveNewton2(q_1,q_2,qdot_1,qdot_2,z,h2,mode);
                numitr(ii) = iter;
                qvec(:,ii) = q;
                qdotvec(:,ii) = qdot;
                zvec(:,ii) = z;
            end
        end
        function plotMarkers(obj)    
            figure(987)
            for i = 1:length(obj.markers)
                quiver3(obj.markers(i).r.,zeros(3,1),zeros(3,1),[1;0;0],[0;1;0],[0;0;1])
            end
        end
        
    end
end




function [x, v, beta] = xvnBDF1(a,x_1,v_1,h)

x = x_1 + h*v_1 + h^2*a;
v = v_1 + h*a;
beta = 1;
end

function [x, v, beta] = xvnBDF2(a,x_1,x_2,v_1,v_2,h)
% order 2
%Cnx2 = 4/3*x_1 - 1/3*x_2 + 8/9*h*v_1 - 2/9*v_2;
%Cnv2 = 4/3*v_1 - 1/3*v_2;
%beta_h = 2/3*h;
x = 4/3*x_1 - 1/3*x_2 + 8/9*h*v_1 - 2/9*h*v_2 + (2/3*h)^2*a;
v = 4/3*v_1 - 1/3*v_2 + (2/3*h)*a;
beta = 2/3;

end